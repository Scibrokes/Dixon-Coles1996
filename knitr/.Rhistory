eng0910 <- data.frame(python.get('eng0910'))
eng1011 <- data.frame(python.get('eng1011'))
eng1112 <- data.frame(python.get('eng1112'))
rm(url0910, url1011, url1112)
library(stringr)
q()
url = 'http://data2.7m.cn/history_Matches_Data/2009-2010/92/en/index.shtml'
library(rPython)
install.packages("coffeewheel")
python.exec('from selenium import webdriver')
python.exec('webdriver.Chrome()')
python.exec('webdriver.open')
python.exec('browser=webdriver.Chrome()')
python.exec('browser.set_window_size(1015, 600)')
python.exec('browser.set_window_position(0, 200)')
rm(url)
lnk <- 'http://data2.7m.cn/history_Matches_Data/2009-2010/92/en/index.shtml'
python.assign('lnk', lnk)
python.exec('browser.get(lnk)')
library(RSelenium)
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
remDr$navigate(lnk)
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
library(RSelenium)
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
remDr$navigate(lnk)
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
library(RSelenium)
remDr <- remoteDriver(browserName = "Firefox")
remDr$open()
remDr$navigate(lnk)
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
library(RSelenium)
remDr <- remoteDriver()
remDr$open()
remDr$navigate(lnk)
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
addCap <- list(phantomjs.page.settings.userAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:29.0) Gecko/20120101 Firefox/29.0")
remDr <- remoteDriver(browserName = "chrome"
, extraCapabilities = addCap)
library(RSelenium)
remDr$open()
remDr$navigate(lnk)
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
library(RSelenium)
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
remDr$navigate(lnk)
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
checkForServre
checkForServer
checkForServer()
startServer()
library(RSelenium)
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
remDr$navigate(lnk)
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
remDr$findElement("id", "e_run_table")
remDr$findElement("id", "e_run_tb")
remDr$findElement("class", "e_run_tb")
test <- remDr$findElement("class", "e_run_tb")
test
attributes(test)
test$clickElement
test$clickElement()
vignette('RSelenium-basics')
tableElem <- remDr$findElement("id", "e_run_tb")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData
xData <- htmlParse(xData, encoding = "UTF-8")
xData
tableElem <- remDr$findElement("id", "e_run_tb")
xData <- tableElem$getElementAttribute("innerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
xData
attributes(xData)
readHTMLTable(xData)
readHTMLTable(htmlParse(xData))
readHTMLTable(xmlParse(xData))
html_table(xData)
html(xData)
as.chracter(xData)
strsplt(xData,'td')
strsplit(xData,'td')
readHTMLTable(xData)
id <- remDr$findElement(using = 'xpath', "//*[@id="e_run_tb"]/tbody/tr[1]/td[1]")
id <- remDr$findElement(using = 'xpath', '//*[@id="e_run_tb"]/tbody/tr[1]/td[1]')
webElem$sendKeysToElement(list("R Cran"))
id$sendKeysToElement(list("R Cran"))
id$sendKeysToElement(list("R Cran", "\uE007"))
id
webElement <- remDr$findElement(using = 'xpath', '//*[@id="e_run_tb"]/tbody/tr[1]/td[1]')
webElement$webElem$sendKeysToElement(list("R Cran"))
webElement$webElem$sendKeysToElement(list("R Cran", key = "enter")))
webElement$webElem$sendKeysToElement(list('R Cran', key = 'enter'))
webElement$clickElement()
webElement$sendKeysToElement(list('R Cran', key = 'enter'))
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
tableElem <- remDr$findElement("id", "e_run_tb")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
tableElem <- remDr$findElement("id", "e_run_tb")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)$e_run_tb
tableElem <- remDr$findElement("id", "e_run_tb")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
mRnd <- readHTMLTable(xData)$e_run_tb
i <- nrow(mRnd)
j <- ncol(mRnd)
as.list(mRound)
as.list(mRnd)
as.list(t(mRnd))
class(mRnd)
t(mRnd)
data.frame(t(mRnd))
as.list(data.frame(t(mRnd)))
lapply(as.list(data.frame(t(mRnd))), function(i){
lapply(as.list(data.frame(t(mRnd)))[i], function(j){
webElem <- remDr$findElement(using = 'xpath', '//*[@id="e_run_tb"]/tbody/tr[1]/td[1]')
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)})})
lapply(as.list(data.frame(t(mRnd))), function(i){
lapply(as.list(data.frame(t(mRnd)))[i], function(j){
webElem <- remDr$findElement(using = 'xpath', paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']'))
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)})})
paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']')
paste0('//*[@id="e_run_tb"]/tbody/tr['i']/td['j']')
paste0('//*[@id="e_run_tb"]/tbody/tr[i]/td[j]')
paste0('//*[@id="e_run_tb"]/tbody/tr[",i,"]/td[j]')
paste0("//*[@id='e_run_tb']/tbody/tr[',i,']/td[',j,']")
lapply(as.list(data.frame(t(mRnd))), function(i){
lapply(as.list(data.frame(t(mRnd)))[i], function(j){
webElem <- remDr$findElement(using = 'xpath', paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']'))
webElem$clickElement()})})
lapply(seq(as.list(data.frame(t(mRnd)))), function(i){
lapply(seq(as.list(data.frame(t(mRnd)))[i]), function(j){
webElem <- remDr$findElement(using = 'xpath', paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']'))
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)})})
seq(as.list(data.frame(t(mRnd)))[i])
seq(as.list(data.frame(t(mRnd))))[i]
seq(as.list(data.frame(t(mRnd))))
seq(as.list(data.frame(t(mRnd))[i]))
as.list(data.frame(t(mRnd)))
as.list(data.frame(t(mRnd)))[i]
length(as.list(data.frame(t(mRnd))))
seq(as.list(data.frame(t(mRnd)))[i])
ncol(mRnd)
nrow(mRnd)
lapply(seq(nrow(mRnd))), function(i){
lapply(seq(ncol(mRnd))[i]), function(j){
webElem <- remDr$findElement(using = 'xpath', paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']'))
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)})})
seq(nrow(mRnd)))
seq(nrow(mRnd))
lapply(seq(nrow(mRnd)), function(i){
lapply(seq(ncol(mRnd))[i]), function(j){
webElem <- remDr$findElement(using = 'xpath', paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']'))
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)})})
lapply(as.list(seq(nrow(mRnd))), function(i){
lapply(as.list(seq(ncol(mRnd))[i])), function(j){
webElem <- remDr$findElement(using = 'xpath', paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']'))
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)})})
nrow(mRnd)
seq(nrow(mRnd))
(mRnd)
seq(ncol(mRnd))[i]
seq(ncol(mRnd))
seq(ncol(mRnd))[1]
seq(ncol(mRnd))[2]
seq(ncol(mRnd)[1])
seq(ncol(mRnd)[2])
lapply(as.list(seq(nrow(mRnd))), function(i){
lapply(as.list(seq(ncol(mRnd))), function(j){
webElem <- remDr$findElement(using = 'xpath', paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']'))
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)})})
library(rPython)
python('Pymodel.py')
python.load('Pymodel.py')
python.load('C:/Users/Scibrokes Trading/Documents/Python Scripts/Pymodel.py')
#Append ! to string, otherwise increment
myFun <- function(x){
if (is.character(x)){
return(paste(x,"!",sep=""))
}
else{
return(x + 1)
}
}
#A nested list structure
l <- list(a = list(a1 = "Boo", b1 = 2, c1 = "Eeek"),
b = 3, c = "Yikes",
d = list(a2 = 1, b2 = list(a3 = "Hey", b3 = 5)))
#Result is named vector, coerced to character
rapply(l,myFun)
#Result is a nested list like l, with values altered
rapply(l, myFun, how = "replace")
l
mRnd
as.list(mRnd)
rapply(as.list(data.frame(t(mRnd))),function(x){
webElem <- remDr$findElement(using = 'xpath', '//*[@id="e_run_tb"]')
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
})
library(RSelenium)
lnk <- 'http://data2.7m.cn/history_Matches_Data/2009-2010/92/en/index.shtml'
remDr <- remoteDriver(browserName = "chrome")
#'remDr$setImplicitWaitTimeout(3000)
remDr$open()
remDr$navigate(lnk)
tableElem <- remDr$findElement("id", "e_run_tb")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
mRnd <- readHTMLTable(xData)$e_run_tb
rm(tableElem, xData)
rapply(as.list(data.frame(t(mRnd))),function(x){
webElem <- remDr$findElement(using = 'xpath', '//*[@id="e_run_tb"]')
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)
})
library(rPython)
#'python.exec('from selenium import webdriver')
#'python.exec('browser = webdriver.Chrome()')
#'python.exec('browser.set_window_size(1015, 600)')
#'python.exec('browser.set_window_position(0, 200)')
#'python.load('C:/Users/Scibrokes Trading/Documents/GitHub/englianhu/WebDriver-DynamicWebpage-Scrapping/7M.py')
#'python.load('C:/Users/Scibrokes Trading/Documents/Github/englianhu/WebDriver-DynamicWebpage-Scrapping/NowGoal.py')
python.load('C:/Users/Scibrokes Trading/Documents/Github/englianhu/WebDriver-DynamicWebpage-Scrapping/Pymodel.py')
url0910 = 'http://data2.7m.cn/history_Matches_Data/2009-2010/92/en/index.shtml'
python.assign('url0910', url0910)
system.time(python.exec('eng0910 = get_7M_matches(url0910)'))
library(rPython)
#'python.exec('from selenium import webdriver')
#'python.exec('browser = webdriver.Chrome()')
#'python.exec('browser.set_window_size(1015, 600)')
#'python.exec('browser.set_window_position(0, 200)')
#'python.load('C:/Users/Scibrokes Trading/Documents/GitHub/englianhu/WebDriver-DynamicWebpage-Scrapping/7M.py')
#'python.load('C:/Users/Scibrokes Trading/Documents/Github/englianhu/WebDriver-DynamicWebpage-Scrapping/NowGoal.py')
python.load('C:/Users/Scibrokes Trading/Documents/Github/englianhu/WebDriver-DynamicWebpage-Scrapping/Pymodel.py')
url0910 = 'http://data2.7m.cn/history_Matches_Data/2009-2010/92/en/index.shtml'
python.assign('url0910', url0910)
system.time(python.exec('eng0910 = get_7M_matches(url0910)'))
library(rPython)
#'python.exec('from selenium import webdriver')
#'python.exec('browser = webdriver.Chrome()')
#'python.exec('browser.set_window_size(1015, 600)')
#'python.exec('browser.set_window_position(0, 200)')
#'python.load('C:/Users/Scibrokes Trading/Documents/GitHub/englianhu/WebDriver-DynamicWebpage-Scrapping/7M.py')
#'python.load('C:/Users/Scibrokes Trading/Documents/Github/englianhu/WebDriver-DynamicWebpage-Scrapping/NowGoal.py')
python.load('C:/Users/Scibrokes Trading/Documents/Github/englianhu/WebDriver-DynamicWebpage-Scrapping/Pymodel.py')
url0910 = 'http://data2.7m.cn/history_Matches_Data/2009-2010/92/en/index.shtml'
python.assign('url0910', url0910)
system.time(python.exec('eng0910 = get_7M_matches(url0910)'))
mbase <- lapply(as.list(seq(nrow(mRnd))), function(i){
lapply(as.list(seq(ncol(mRnd))), function(j){
webElem <- remDr$findElement(using = 'xpath', paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']'))
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)})})
library(RSelenium)
lnk <- 'http://data2.7m.cn/history_Matches_Data/2009-2010/92/en/index.shtml'
remDr <- remoteDriver(browserName = "chrome")
#'remDr$setImplicitWaitTimeout(3000)
remDr$open()
remDr$navigate(lnk)
tableElem <- remDr$findElement("id", "e_run_tb")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
mRnd <- readHTMLTable(xData)$e_run_tb
rm(tableElem, xData)
mbase <- lapply(as.list(seq(nrow(mRnd))), function(i){
lapply(as.list(seq(ncol(mRnd))), function(j){
webElem <- remDr$findElement(using = 'xpath', paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']'))
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)})})
mbase
mb <- Reduce(function(x, y) merge(x, y, all = T), mbase, accumulate = F)
mb
rapply(mbase,merge)
rapply(mbase, function(x)merge(x))
rapply(mbase, function(x)merge(x,y))
mbase
lapply(mbase,function(x)merge(x))
lapply(mbase,function(x){
Reduce(function(x, y) merge(x, y, all = T), mbase, accumulate = F))
mb <- Reduce(function(x, y) merge(x, y, all = T), unlist(mbase,recursive=F), accumulate = F)
mb
unlist(mbase)
unlist(mbase,recursive=F)
mb <- Reduce(function(x, y) merge(x, y, all = T), unlist(mbase,recursive=F)$s, accumulate = F)
mb
unlist(mbase,recursive=F)
mb <- Reduce(function(x, y) merge(x, y, all = T), unlist(mbase,recursive=F)$s1, accumulate = F)
mb
mb <- Reduce(function(x, y) merge(x, y, all = T), mbase$s1, accumulate = F)
mb
mbase <- unlist(lapply(as.list(seq(nrow(mRnd))), function(i){
lapply(as.list(seq(ncol(mRnd))), function(j){
webElem <- remDr$findElement(using = 'xpath', paste0('//*[@id="e_run_tb"]/tbody/tr[',i,']/td[',j,']'))
webElem$clickElement()
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
readHTMLTable(xData)})}),recursive=FALSE)
mbase
mbase$s1
mbase[[1$s1
\
mbase[[1]]$s1
mbase[[2]]$s1
mb <- Reduce(function(x, y) merge(x, y, all = T), mbase, accumulate = F)
mb
name(mbase)
name(mbase[[1]])
names(mbase)
names(mbase[[1]])
names(mbase[[2]])
lapply(names(mbase), function(x) x=NULL)
names(mbase[[2]])
lapply(mbase, function(x){ names(x)=NULL,x})
lapply(mbase, function(x){names(x)=NULL;x})
lapply(mbase, function(x){ names(x)=NULL,x})
lapply(mbase, function(x){ names(x)=NULL;x})
unlist(lapply(mbase, function(x){ names(x)=NULL;x}),recursive=F)
mbase <- unlist(lapply(mbase, function(x){ names(x)=NULL;x}),recursive=F)
mb <- Reduce(function(x, y) merge(x, y, all = T), mbase, accumulate = F)
mb
mbase <- Reduce(function(x, y) merge(x, y, all = T), mbase, accumulate = F)
mbase[-ncol(mbase)]
head(url0910)
head(eng0910)
tableElem <- remDr$findElement("id", "Match_Table")
xData <- tableElem$getElementAttribute("outerHTML")[[1]]
xData <- htmlParse(xData, encoding = "UTF-8")
xData
readHTMLTable(xData)
remDr$close()
sample
install.packages("cairo")
install.packages('RWebdriver')
install.packages('Rwebdriver')
13/30*1300
450*9*12
48600/500
97.2/12
install.packages('editR')
install.packages('editR')
mydir <- getwd()
setwd(paste0(getwd(),'/GitHub/englianhu/Dixon-Coles1996/knitr'))
library(knitr)
library(markdown)
# knitr configuration
opts_knit$set(progress=FALSE)
opts_chunk$set(echo=TRUE, message=FALSE, tidy=TRUE, comment=NA,
fig.path="figure/", fig.keep="high", fig.width=10, fig.height=6,
fig.align="center")
knit2html('Dixon-Coles1996.Rmd')
browseURL('Dixon-Coles1996.html')
getwd()
library(shiny)
library(shinyapps)
library(devtools)
library(fbRanks)
library(XML)
library(plyr)
library(dplyr)
# Load soccer matches data
load('C:/Users/Scibrokes Trading/Documents/GitHub/englianhu/Dixon-Coles1996/data/scores.Rda')
#scores <- read.csv('C:/Users/Scibrokes Trading/Documents/GitHub/englianhu/Dixon-Coles1996/data/scores.csv')
scores <- create.fbRanks.dataframes('C:/Users/Scibrokes Trading/Documents/GitHub/englianhu/Dixon-Coles1996/data/scores.csv')
teams <- scores$scores[order(scores$scores$date, decreasing=T) & !duplicated(scores$scores$venue),][c('home.team','venue')]
names(teams)[1] <- 'name'
# Dixon & Coles poisson model, we can also add some more effect like weather, pitch condition, home ground advantages etc.
md1 <- rank.teams(scores$scores, min.date=min(scores$scores$date),max.date=max(scores$scores$date), silent=T) #without other effects
md2 <- rank.teams(scores$scores, min.date=min(scores$scores$date),max.date=max(scores$scores$date), silent=T) #with home team advantage
md3 <- rank.teams(scores$scores, min.date=min(scores$scores$date),max.date=max(scores$scores$date), silent=T, add='venue') #with venue effects
# -------------------------------------------------------------------------------
# model 1 measure the team attack and defence index.
md1.att <- coef(md1$fit$cluster.1)[1:nrow(md1$teams)]
md1.def <- coef(md1$fit$cluster.1)[-seq(1,nrow(md1$teams))]
md1.tbl <- data.frame(coef(md1))[c(1:nrow(scores$teams)),-1]; names(md1.tbl) <- c('attack','defence')
md1.tbl <- data.frame(team=sort(as.character(teams$name)),md1.tbl)
md1.tbl$attack <- exp(md1.tbl$attack); md1.tbl$defence <- exp(md1.tbl$defence); row.names(md1.tbl) <- NULL
md1.hm <- ddply(scores$scores, "home.team", summarise, scores = sum(home.score), mean = mean(home.score),
sd = sd(home.score), se = sd/sqrt(nrow(scores$scores)))
md1.aw <- ddply(scores$scores, "away.team", summarise, scores = sum(away.score), mean  = mean(away.score),
sd = sd(away.score), se = sd/sqrt(nrow(scores$scores)))
# model 2 measure the team attack, defence and home ground advantage index.
md2.att <- coef(md2$fit$cluster.1)[1:nrow(md2$teams)]
md2.def <- coef(md2$fit$cluster.1)[seq(nrow(md2$teams)+2,nrow(md2$teams)*2)-1]
md2.hdv <- coef(md2$fit$cluster.1)[-seq(nrow(md2$teams)*2)+1]
md2.tbl <- data.frame(coef(md2)$coef.list); names(md2.tbl) <- c('attack','defence','hdv')
md2.tbl <- data.frame(team=sort(as.character(teams$name)),md2.tbl)
md2.tbl$attack <- exp(md2.tbl$attack); md2.tbl$defence <- exp(md2.tbl$defence); row.names(md2.tbl) <- NULL
md2.hm <- ddply(scores$scores, "home.team", summarise, scores = sum(home.score), mean = mean(home.score),
sd = sd(home.score), se = sd/sqrt(nrow(scores$scores)))
md2.aw <- ddply(scores$scores, "away.team", summarise, scores = sum(away.score), mean  = mean(away.score),
sd = sd(away.score), se = sd/sqrt(nrow(scores$scores)))
coef(md2)$coef
coef(md2)$coef.list
md2.hvd
md2.hdv
scores$scores
head(scores$scores)
# Dixon & Coles poisson model, we can also add some more effect like weather, pitch condition, home ground advantages etc.
md1 <- rank.teams(scores$scores, min.date=min(scores$scores$date),max.date=max(scores$scores$date), silent=T) #without other effects
md2 <- rank.teams(scores$scores, min.date=min(scores$scores$date),max.date=max(scores$scores$date), silent=T, add='hdv') #with home team advantage
md3 <- rank.teams(scores$scores, min.date=min(scores$scores$date),max.date=max(scores$scores$date), silent=T, add='venue') #with venue effects
# -------------------------------------------------------------------------------
# model 1 measure the team attack and defence index.
md1.att <- coef(md1$fit$cluster.1)[1:nrow(md1$teams)]
md1.def <- coef(md1$fit$cluster.1)[-seq(1,nrow(md1$teams))]
md1.tbl <- data.frame(coef(md1))[c(1:nrow(scores$teams)),-1]; names(md1.tbl) <- c('attack','defence')
md1.tbl <- data.frame(team=sort(as.character(teams$name)),md1.tbl)
md1.tbl$attack <- exp(md1.tbl$attack); md1.tbl$defence <- exp(md1.tbl$defence); row.names(md1.tbl) <- NULL
md1.hm <- ddply(scores$scores, "home.team", summarise, scores = sum(home.score), mean = mean(home.score),
sd = sd(home.score), se = sd/sqrt(nrow(scores$scores)))
md1.aw <- ddply(scores$scores, "away.team", summarise, scores = sum(away.score), mean  = mean(away.score),
sd = sd(away.score), se = sd/sqrt(nrow(scores$scores)))
# model 2 measure the team attack, defence and home ground advantage index.
md2.att <- coef(md2$fit$cluster.1)[1:nrow(md2$teams)]
md2.def <- coef(md2$fit$cluster.1)[seq(nrow(md2$teams)+2,nrow(md2$teams)*2)-1]
md2.hdv <- coef(md2$fit$cluster.1)[-seq(nrow(md2$teams)*2)+1]
md2.tbl <- data.frame(coef(md2)$coef.list); names(md2.tbl) <- c('attack','defence','hdv')
md2.tbl <- data.frame(team=sort(as.character(teams$name)),md2.tbl)
md2.tbl$attack <- exp(md2.tbl$attack); md2.tbl$defence <- exp(md2.tbl$defence); row.names(md2.tbl) <- NULL
md2.hm <- ddply(scores$scores, "home.team", summarise, scores = sum(home.score), mean = mean(home.score),
sd = sd(home.score), se = sd/sqrt(nrow(scores$scores)))
md2.aw <- ddply(scores$scores, "away.team", summarise, scores = sum(away.score), mean  = mean(away.score),
sd = sd(away.score), se = sd/sqrt(nrow(scores$scores)))
# model 3 measure the team attack, defence and venue index.
md3.att <- coef(md3$fit$cluster.1)[1:nrow(md3$teams)]
md3.def <- coef(md3$fit$cluster.1)[seq(nrow(md3$teams)+2,nrow(md3$teams)*2)-1]
md3.hdv <- coef(md3$fit$cluster.1)[-seq(nrow(md3$teams)*2)+1]
md3.tbl <- data.frame(coef(md3))[c(1:nrow(scores$teams)),-1]; names(md3.tbl) <- c('attack','defence')
md3.tbl <- data.frame(team=sort(as.character(teams$name)), md3.tbl)
md3.tbl$attack <- exp(md3.tbl$attack); md3.tbl$defence <- exp(md3.tbl$defence); row.names(md3.tbl) <- NULL
md3.hm <- ddply(scores$scores, "home.team", summarise, scores = sum(home.score), mean = mean(home.score),
sd = sd(home.score), se = sd/sqrt(nrow(scores$scores)))
md3.aw <- ddply(scores$scores, "away.team", summarise, scores = sum(away.score), mean  = mean(away.score),
sd = sd(away.score), se = sd/sqrt(nrow(scores$scores)))
rm(list=ls())
install.packages(c("caret", "digest", "httr", "lazyeval", "manipulate", "maxLik", "rstudioapi", "rvest"))
install.packages("rvest")
