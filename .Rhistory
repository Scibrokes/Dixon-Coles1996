# ===============================================================================
# Dixon & Coles poisson model, we can also add some more effect like weather, pitch condition, home ground advantages etc.
md1 <- rank.teams(dat, min.date=min(dat$date),max.date=max(dat$date)) #without other effects
md2 <- rank.teams(dat, min.date=min(dat$date),max.date=max(dat$date),add='hdv') #with home team advantage
md3 <- rank.teams(dat, min.date=min(dat$date),max.date=max(dat$date),add='venue') #with venue effects
# -------------------------------------------------------------------------------
# model 1 measure the team attack and defence index.
md1.att <- coef(md1$fit$cluster.1)[1:nrow(md1$teams)]
md1.def <- coef(md1$fit$cluster.1)[-seq(1,nrow(md1$teams))]
md1.tbl <- data.frame(coef(md1))[c(1:nrow(teams)),-1]; names(md1.tbl) <- c('attack','defence')
md1.tbl <- data.frame(team=sort(as.character(teams$name)),md1.tbl)
md1.tbl$attack <- exp(md1.tbl$attack); md1.tbl$defence <- exp(md1.tbl$defence); row.names(md1.tbl) <- NULL
md1.hm <- ddply(dat, "home.team", summarise, score = sum(home.score), mean = mean(home.score),
sd = sd(home.score), se = sd/sqrt(nrow(dat)))
md1.aw <- ddply(dat, "away.team", summarise, score = sum(away.score), mean  = mean(away.score),
sd = sd(away.score), se = sd/sqrt(nrow(dat)))
# model 2 measure the team attack, defence and home ground advantage index.
md2.att <- coef(md2$fit$cluster.1)[1:nrow(md2$teams)]
md2.def <- coef(md2$fit$cluster.1)[seq(nrow(md2$teams)+2,nrow(md2$teams)*2)-1]
md2.hdv <- coef(md2$fit$cluster.1)[-seq(nrow(md2$teams)*2)+1]
md2.tbl <- data.frame(coef(md2))[c(1:nrow(teams)),-1]; names(md2.tbl) <- c('attack','defence')
md2.tbl <- data.frame(team=sort(as.character(teams$name)),md2.tbl)
md2.tbl$attack <- exp(md2.tbl$attack); md2.tbl$defence <- exp(md2.tbl$defence); row.names(md2.tbl) <- NULL
md2.hm <- ddply(dat, "home.team", summarise, score = sum(home.score), mean = mean(home.score),
sd = sd(home.score), se = sd/sqrt(nrow(dat)))
md2.aw <- ddply(dat, "away.team", summarise, score = sum(away.score), mean  = mean(away.score),
sd = sd(away.score), se = sd/sqrt(nrow(dat)))
# model 3 measure the team attack, defence and venue index.
md3.att <- coef(md3$fit$cluster.1)[1:nrow(md3$teams)]
md3.def <- coef(md3$fit$cluster.1)[seq(nrow(md3$teams)+2,nrow(md3$teams)*2)-1]
md3.hdv <- coef(md3$fit$cluster.1)[-seq(nrow(md3$teams)*2)+1]
md3.tbl <- data.frame(coef(md3))[c(1:nrow(teams)),-1]; names(md3.tbl) <- c('attack','defence')
md3.tbl <- data.frame(team=sort(as.character(teams$name)), md3.tbl)
md3.tbl$attack <- exp(md3.tbl$attack); md3.tbl$defence <- exp(md3.tbl$defence); row.names(md3.tbl) <- NULL
md3.hm <- ddply(dat, "home.team", summarise, score = sum(home.score), mean = mean(home.score),
sd = sd(home.score), se = sd/sqrt(nrow(dat)))
md3.aw <- ddply(dat, "away.team", summarise, score = sum(away.score), mean  = mean(away.score),
sd = sd(away.score), se = sd/sqrt(nrow(dat)))
# ===============================================================================
# Simulate the venue (home ground advantage and neutral ground), and predict a specific kick-off date
# Simulate model 1
# Example : predict a match kick-off on 2014-05-13
sim1 <- simulate(md1)
predict(md1, date=as.Date('2014-05-13'))
# Simulate model 2
sim2 <- simulate(md2, hdv=1)
#Extra arguments (besides team and venue) passed in should correspond to columns in the team or match files.
#The following extra arguments are not in the team or match files (names are not case sensitive): hvd
predict(md2, hdv=1, date=as.Date('2014-05-13'))
# Simulate model 3
# Example : predict a match kick-off at Cardiff City Stadium on 2014-05-13
sim3 <- simulate(md3, venue='Cardiff City Stadium')
predict(md3, venue='Cardiff City Stadium', date=as.Date('2014-05-13'))
library('magrittr')
mydir <- paste0(getwd(),'/GitHub/englianhu/Dixon-Coles1996')
library(knitr)
library(markdown)
# knitr configuration
opts_knit$set(progress=FALSE)
opts_chunk$set(echo=TRUE, message=FALSE, tidy=TRUE, comment=NA,
fig.path="figure/", fig.keep="high", fig.width=10, fig.height=6,
fig.align="center")
knit2html(paste0(mydir(), 'knitr/Dixon-Coles1996.Rmd'))
browseURL(paste0(mydir(), 'knitr/Dixon-Coles1996.html'))
mydir <- paste0(getwd(),'/GitHub/englianhu/Dixon-Coles1996')
library(knitr)
library(markdown)
# knitr configuration
opts_knit$set(progress=FALSE)
opts_chunk$set(echo=TRUE, message=FALSE, tidy=TRUE, comment=NA,
fig.path="figure/", fig.keep="high", fig.width=10, fig.height=6,
fig.align="center")
knit2html(paste0(mydir, 'knitr/Dixon-Coles1996.Rmd'))
browseURL(paste0(mydir, 'knitr/Dixon-Coles1996.html'))
mydir <- paste0(getwd(),'/GitHub/englianhu/Dixon-Coles1996')
library(knitr)
library(markdown)
# knitr configuration
opts_knit$set(progress=FALSE)
opts_chunk$set(echo=TRUE, message=FALSE, tidy=TRUE, comment=NA,
fig.path="figure/", fig.keep="high", fig.width=10, fig.height=6,
fig.align="center")
knit2html(paste0(mydir, '/knitr/Dixon-Coles1996.Rmd'))
browseURL(paste0(mydir, '/knitr/Dixon-Coles1996.html'))
browseURL(paste0(mydir, '/knitr/Dixon-Coles1996.html'))
paste0(mydir, '/knitr/Dixon-Coles1996.html')
paste0('/knitr/Dixon-Coles1996.html')
getwd()
mydir
rm(list=ls())
mydi
mydir
mydir <- paste0(getwd(),'/GitHub/englianhu/Dixon-Coles1996')
library(knitr)
library(markdown)
# knitr configuration
opts_knit$set(progress=FALSE)
opts_chunk$set(echo=TRUE, message=FALSE, tidy=TRUE, comment=NA,
fig.path="figure/", fig.keep="high", fig.width=10, fig.height=6,
fig.align="center")
mydir
getwd()
knit2html(paste0(mydir, '/knitr/Dixon-Coles1996.Rmd'))
browseURL(paste0(mydir, '/knitr/Dixon-Coles1996.html'))
paste0(mydir, '/knitr/Dixon-Coles1996.html')
knit2html(input=paste0(mydir, '/knitr/Dixon-Coles1996.Rmd'))
browseURL(paste0(mydir, '/knitr/Dixon-Coles1996.html'))
md1
md1.aw
knit2html('/knitr/Dixon-Coles1996.Rmd')
browseURL('/knitr/Dixon-Coles1996.html')
knit2html('~/knitr/Dixon-Coles1996.Rmd')
browseURL('~/knitr/Dixon-Coles1996.html')
set(paste0(getwd(),'/GitHub/englianhu/Dixon-Coles1996/knitr'))
rm(list=ls())
mydir <- getwd()
setwd(paste0(getwd(),'/GitHub/englianhu/Dixon-Coles1996/'))
library(knitr)
library(markdown)
# knitr configuration
opts_knit$set(progress=FALSE)
opts_chunk$set(echo=TRUE, message=FALSE, tidy=TRUE, comment=NA,
fig.path="figure/", fig.keep="high", fig.width=10, fig.height=6,
fig.align="center")
knit2html('knitr/Dixon-Coles1996.Rmd'))
browseURL('knitr/Dixon-Coles1996.html'))
mydir <- getwd()
setwd(paste0(getwd(),'/GitHub/englianhu/Dixon-Coles1996/'))
library(knitr)
library(markdown)
# knitr configuration
opts_knit$set(progress=FALSE)
opts_chunk$set(echo=TRUE, message=FALSE, tidy=TRUE, comment=NA,
fig.path="figure/", fig.keep="high", fig.width=10, fig.height=6,
fig.align="center")
knit2html('knitr/Dixon-Coles1996.Rmd')
browseURL('knitr/Dixon-Coles1996.html')
library('github')
library('rgithub')
?github
github_pat()
github_pull()
url <- 'https://github.com/englianhu/Dixon-Coles1996/blob/master/data/scores.csv'
url %>>% html_attr()
url %>>% html
url %>% html
url %>% html_session()
url %>% html_session() %>% read.csv()
url %>% html_session() %>% textConnection() %>% read.csv()
url %>% html_session() %>% textConnection(.) %>% read.csv()
url %>% html_session() %>% read.csv(textConnection(.))
read.csv(textConnection(getURL(url)))
source_https <- function(url, ...) {
# load package
require(RCurl)
# parse and evaluate each .R script
sapply(c(url, ...), function(u) {
eval(parse(text = getURL(u, followlocation = TRUE, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))), envir = .GlobalEnv)
})
}
# Example
source_htpps(url)
source_https(url)
read.csv(source_https(url))
source_https <- function(u, unlink.tmp.certs = FALSE) {
# load package
require(RCurl)
# read script lines from website using a security certificate
if(!file.exists("cacert.pem")) download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile = "cacert.pem")
script <- getURL(u, followlocation = TRUE, cainfo = "cacert.pem")
if(unlink.tmp.certs) unlink("cacert.pem")
# parase lines and evealuate in the global environement
eval(parse(text = script), envir= .GlobalEnv)
}
read.csv(source_https(url))
read.csv(source_https(url, unlink.tmp.certs = TRUE))
source_https <- function(url, ...) {
# load package
require(RCurl)
# parse and evaluate each .R script
sapply(c(url, ...), function(u) {
eval(parse(text = getURL(u, followlocation = TRUE, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))), envir = .GlobalEnv)
})
}
read.csv(source_https(url))
#Via http://tonybreyal.wordpress.com/2011/11/24/source_https-sourcing-an-r-script-from-github/
source_github <- function(u) {
# load package
require(RCurl)
# read script lines from website
script <- getURL(u, ssl.verifypeer = FALSE, followlocation = TRUE)
print(script)
# parse lines and evaluate in the global environment
eval(parse(text = script), envir= .GlobalEnv)
}
read.csv(source_https(url))
read.csv(source_github(url))
lnk <- 'https://github.com/englianhu/Dixon-Coles1996/tree/master/data'
rm(url)
lnk %>% html_session()
lnk <- 'https://github.com/englianhu/Dixon-Coles1996/tree/master/data/scores.csv'
lnk %>% html_session()
lnk %>% html_session() %>% download.file()
lnk %>% html_session() %>% download.file(.)
rm(list=ls())
#' downloadNotInstalled<-function(x){
#'   for(i in x){
#'     if(!require(i,character.only=TRUE)){
#'       install.packages(i,repos="http://cran.r-project.org")
#'       library(i,character.only=TRUE)
#'     }
#'   }
#' }
#' requiredPackages = c("shiny","shinyapps","devtools","fbRanks","XML","plyr","dplyr")
#' downloadNotInstalled(requiredPackages)
library("shiny")
library("shinyapps")
library(devtools)
library(fbRanks)
library(XML)
library(plyr)
library(dplyr)
# -----------------------------------------------------------
# read source files from github
source_https <- function(url, ...) {
# load package
require(RCurl)
# parse and evaluate each .R script
sapply(c(url, ...), function(u) {
eval(parse(text = getURL(u, followlocation = TRUE, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))), envir = .GlobalEnv)
})
}
# -----------------------------------------------------------
source_https('C:/Users/User/Documents/GitHub/englianhu/Dixon-Coles1996/function/scrapeEPL.R')
lnk <- 'https://github.com/englianhu/Dixon-Coles1996/blob/master/data/scores.csv'
source_https('https://github.com/englianhu/Dixon-Coles1996/blob/master/function/scrapeEPL.R')
rm(list=ls())
#' downloadNotInstalled<-function(x){
#'   for(i in x){
#'     if(!require(i,character.only=TRUE)){
#'       install.packages(i,repos="http://cran.r-project.org")
#'       library(i,character.only=TRUE)
#'     }
#'   }
#' }
#' requiredPackages = c("shiny","shinyapps","devtools","fbRanks","XML","plyr","dplyr")
#' downloadNotInstalled(requiredPackages)
library("shiny")
library("shinyapps")
library(devtools)
library(fbRanks)
library(XML)
library(plyr)
library(dplyr)
# load scrapeR function
source('C:/Users/Scibrokes Trading/Documents/GitHub/englianhu/Dixon-Coles1996/function/scrapeEPL.R')
#' downloadNotInstalled<-function(x){
#'   for(i in x){
#'     if(!require(i,character.only=TRUE)){
#'       install.packages(i,repos="http://cran.r-project.org")
#'       library(i,character.only=TRUE)
#'     }
#'   }
#' }
#' requiredPackages = c("shiny","shinyapps","devtools","fbRanks","XML","plyr","dplyr")
#' downloadNotInstalled(requiredPackages)
library("shiny")
library("shinyapps")
library(devtools)
library(fbRanks)
library(XML)
library(plyr)
library(dplyr)
# load scrapeR function
source('C:/Users/User/Documents/GitHub/englianhu/Dixon-Coles1996/function/scrapeEPL.R')
scrapeEPL
#' downloadNotInstalled<-function(x){
#'   for(i in x){
#'     if(!require(i,character.only=TRUE)){
#'       install.packages(i,repos="http://cran.r-project.org")
#'       library(i,character.only=TRUE)
#'     }
#'   }
#' }
#' requiredPackages = c("shiny","shinyapps","devtools","fbRanks","XML","plyr","dplyr")
#' downloadNotInstalled(requiredPackages)
library("shiny")
library("shinyapps")
library(devtools)
library(fbRanks)
library(XML)
library(plyr)
library(dplyr)
# load scrapeR function
source('C:/Users/User/Documents/GitHub/englianhu/Dixon-Coles1996/function/scrapeEPL.R')
# scrape EPL soccer matches from official website
mydir <- 'C:/Users/User/Documents/GitHub/englianhu/Dixon-Coles1996/data/'
scrapeEPL(season = '2013-2014', saveDir=mydir)
season = '2013-2014'; saveDir=mydir
if(all(unlist(lapply(strsplit(season,'-'),function(x) as.list(nchar(x))==4)))==TRUE){
cat('season = ',season)
} else {
stop('Please enter a correct season name. For example: scrapeEPL(season="2013-2014")')
}
# get the English Premier League 2013/2014 from official website
url = getURL(paste0('http://www.premierleague.com/en-gb/matchday/results.html?paramClubId=ALL&paramComp_8=true&paramSeason=',season,'&view=.scoresSeason'))
tbl <- readHTMLTable(htmlParse(url),header='text'); tbl[[length(tbl)]] <- NULL
tbl <- lapply(tbl,function(x) {x$V1 = x$V1[1]; x[-1,]})
scores <- Reduce(function(x, y) merge(x, y, all = TRUE),
tbl, accumulate = F)[1:5]
scores$HG <- as.numeric(unlist(lapply(str_split(as.character(scores$V3),'-'),function(x) x[1])))
scores$AG <- as.numeric(unlist(lapply(str_split(as.character(scores$V3),'-'),function(x) x[2])))
scores$V3 <- NULL
names(scores) <- c('date','home.team','away.team','venue','home.score','away.score')
scores$date <- unlist(lapply(str_split(scores$date,' '),function(x) paste(x[-1],collapse='')))
scores$date <- as.Date(scores$date, "%d%B%Y")
attr(scores$home.team,'levels') <- levels(factor(scores$home.team))
attr(scores$away.team,'levels') <- levels(factor(scores$away.team))
scores$venue <- as.character(scores$venue)
teams <- scores[order(scores$date, decreasing=T) & !duplicated(scores$venue),][c('home.team','venue')]
names(teams)[1] <- 'name'
scores$hdv <- ifelse(scores$home.team==teams$name & scores$venue==teams$venue, 1, 0) # scoresa error:only 33 matches home ground among 380 matches
scores$total.goals <- scores$home.score + scores$away.score
rm(url, tbl, teams)
save(scores, file=paste0(saveDir, 'scores.Rda'))
write.csv(scores, paste(saveDir, 'scores.csv'))
cat('There are two files have been saved into : \n ',paste0(saveDir,'scores.Rda \n '),paste0(saveDir,'scores.csv'))
tbl
library('XML')
# Example of using this function:
#   mydir='C:/Users/User/Documents/GitHub/englianhu/Dixon-Coles1996/data/'
#   scrapeEPL(season='2012-2013', saveDir=mydir)
# test the input season name
if(all(unlist(lapply(strsplit(season,'-'),function(x) as.list(nchar(x))==4)))==TRUE){
cat('season = ',season)
} else {
stop('Please enter a correct season name. For example: scrapeEPL(season="2013-2014")')
}
# get the English Premier League 2013/2014 from official website
url = getURL(paste0('http://www.premierleague.com/en-gb/matchday/results.html?paramClubId=ALL&paramComp_8=true&paramSeason=',season,'&view=.scoresSeason'))
tble <- readHTMLTable(htmlParse(url),header='text'); tble[[length(tble)]] <- NULL
tble <- lapply(tble,function(x) {x$V1 = x$V1[1]; x[-1,]})
scores <- Reduce(function(x, y) merge(x, y, all = TRUE),
tble, accumulate = F)[1:5]
scores$HG <- as.numeric(unlist(lapply(str_split(as.character(scores$V3),'-'),function(x) x[1])))
scores$AG <- as.numeric(unlist(lapply(str_split(as.character(scores$V3),'-'),function(x) x[2])))
scores$V3 <- NULL
tble
rm(url)
lnk = paste0('http://www.premierleague.com/en-gb/matchday/results.html?paramClubId=ALL&paramComp_8=true&paramSeason=',season,'&view=.scoresSeason')
lnk %>% html()
lnk %>% html_session()
lnk %>>% html_session() %>>% html_table()
lnk %>>% html_session() %>>% html_table() %>>% merge()
lnk %>>% html_session() %>>% html_table() %>>% join_all()
lnk %>>% html_session() %>>% html_table() %>>% join_all(.)
lnk %>>% html_session() %>>% html_table() %>>% join_all(by=all)
?join
lnk %>>% html_session() %>>% html_table()
lnk %>>% html_session() %>>% html_table() %>>% .[-ncol(.)]
lnk %>>% html_session() %>>% html_table() %>>% .[-ncol()]
lnk %>>% html_session() %>>% html_table() %>>% .[1:5]
lnk %>>% html_session() %>>% html_table() %>>% .[,1:5]
lnk %>>% html_session() %>>% html_table() %>>% .[[]] %>>% .[,1:5]
lnk %>>% html_session() %>>% html_table() %>>% .[[]] %>>% .[1:5]
lnk %>>% html_session() %>>% html_table() %>>% .[[]] %>>% .[]
lnk %>>% html_session() %>>% html_table() %>>% .[[.]] %>>% .[]
lnk %>>% html_session() %>>% html_table() %>>% .[[.,.]] %>>% .[]
lnk %>>% html_session() %>>% html_table() %>>% .[[2]]
lnk %>>% html_session() %>>% html_table() %>% .[[]] %>% .[-ncol()]
lnk %>>% html_session() %>>% html_table() %>% .[[]] %>% .[-ncol(.)]
lnk %>>% html_session() %>>% html_table() %>% .[[]]
lnk %>>% html_session() %>>% html_table() %>% .[[.]]
lnk %>>% html_session() %>>% html_table() %>% .[[1]]
lnk %>>% html_session() %>>% html_table() %>% .[[1]] %>% .[-ncol()]
lnk %>>% html_session() %>>% html_table() %>% .[[1]] %>% .[-ncol(.)]
lnk %>>% html_session() %>>% html_table() %>% .[[]] %>% .[-ncol(.)]
lnk %>>% html_session() %>>% html_table() %>% join_all()
lnk %>>% html_session() %>>% html_table() %>% join_all(.)
lnk %>>% html_session() %>>% html_table() %>% join_all(.,'Date')
dfs <- lnk %>>% html_session() %>>% html_table()
join_all(dfs)
dfs
dfs <- lnk %>>% html_session() %>>% html_table() %>% .[[-length()]]
dfs <- lnk %>>% html_session() %>>% html_table() %>% .[[-length(.)]]
dfs <- dfs[[-length(dfs)]]
length(dfs)
dfs[[length(dfs)]]
dfs[[-length(dfs)]]
dfs <- lnk %>>% html_session() %>>% html_table() %>% .[[1:(length(.)-1)]]
dfs
dfs <- lnk %>>% html_session() %>>% html_table() %>% .[[1:(length()-1)]]
dfs[[1:length(dfs)-1]]
dfs[[1:(length(dfs)-1)]]
dfs[[length(dfs)]] <- NULL
length(dfs)
dfs
join_all(dfs)
join_all(dfs,x)
dfs
join_all(dfs)
dfs[[1]]
dfs <- lapply(dfs,function(x) {x$V1 = x$V1[1]; x[-1,]})
dfs
dfs <- lnk %>>% html_session() %>>% html_table()
dfs[[length(dfs)]] <- NULL
dfs
lapply(dfs,function(x) {x[,1] = x[,1][1]; x[-1,]})
lapply(dfs,function(x) {x[,1] = x[,1][1]})
lapply(dfs,function(x) {x[,1]})
lapply(dfs,function(x) {x[,1]=names(x[,1])})
lapply(dfs,function(x) {names(x[,1])})
lapply(dfs,function(x) {names(x[1])})
lapply(dfs,function(x) {x[,1]=names(x[1])})
lapply(dfs,function(x) {x[,1]=names(x[1]); x[-1]})
lapply(dfs,function(x) {x[,1]=names(x[1]); x[-1,]})
lapply(dfs,function(x) {x[,1]=names(x[1]); x[,-ncol(x)]})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]})
join_all(lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]}))
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]}) %>>% join_all()
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]}) %>>% join_all(.,'date')
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); data.frame(x,x[,-ncol(x)])})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); data.frame(seq(x),x[,-ncol(x)])})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); data.frame(seq(as.list(x)),x[,-ncol(x)])})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); data.frame(seq(length(x)),x[,-ncol(x)])})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]; seq(x)})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]; names(x)})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]; list(x)})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]; x})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]; length(x)})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]; nrow(x)})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]})
dfs <- lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]})
dfs
alpply(seq(dfs),function(i) data.frame(i,dfs))
alpply(seq(dfs),function(i) data.frame(i,dfs))
seq(dfs)
alpply(seq(dfs),function(i) data.frame(i,dfs[[i]]))
alpply(seq(dfs),function(i) data.frame(i))
as.list(seq(dfs))
as.list(seq(dfs))
dfs <- lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); data.frame(as.list(seq(x)),x[,-ncol(x)])})
dfs
dfs <- lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); data.frame(as.list(x),x[,-ncol(x)])})
dfs
dfs <- lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); y=x[,-ncol(x)]; data.frame(as.list(length(x)),y)})
dfs
dfs <- lnk %>>% html_session() %>>% html_table(); dfs[[length(dfs)]] <- NULL
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); y=x[,-ncol(x)]; data.frame(as.list(length(x)),y)})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); y=x[,-ncol(x)]; data.frame(as.list(seq(x)),y)})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); y=x[,-ncol(x)]; data.frame(as.list(x),y)})
dfs <- lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]})
dfs
lapply(as.list(seq(dfs)),function(i) data.frame(i,dfs))
as.list(seq(dfs))
num <- as.list(seq(dfs))
dfs <- lnk %>>% html_session() %>>% html_table(); dfs[[length(dfs)]] <- NULL
num <- as.list(seq(dfs))
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); data.frame(num,x[,-ncol(x)])})
lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); data.frame(c(x,recursive=T),x[,-ncol(x)])})
c(dfs[,1],recursive=T)
c(dfs$date,recursive=T)
dfs
dfs[[1]]
dfs.ls
dfssort
dfs.size()
dfs.size
size(dfs)
dfs
dfs <- lapply(dfs,function(x) {x[,1]=names(x[1]); names(x)=c('date','home.team','score','away.team','venue'); x[,-ncol(x)]})
scores <- Reduce(function(x, y) merge(x, y, all = TRUE),
dfs, accumulate = F)
class(dfs)
join_all(dfs)
dfs
data.frame(num,dfs)
num
lapply(num,function(i), data.frame(i,dfs))
lapply(num,function(i) data.frame(i,dfs))
num
lapply(num,function(i) data.frame(id=i,dfs))
lapply(num,function(i) data.frame(id=c(i,recursive=T),dfs))
args(c)
sapply(num)
lapply(num,function(i) data.frame(id=i,dfs[[i]]))
dfs <- lapply(num,function(i) data.frame(id=i,dfs[[i]]))
join_all(dfs)
join_all(dfs,by='id')
join_all(dfs,'id')
join_all(dfs,first,'id')
join_all(dfs,'id',match='first')
join.keys(dfs)
join_all(dfs)
merge.list(dfs)
merge(dfs)
merge.list(dfs,'id')
merge(dfs,'id')
Reduce(function(x, y) merge(x, y, all = TRUE),
dfs, accumulate = F)
dfs
Reduce(function(x, y) merge(x, y, all = TRUE), dfs)
Reduce(function(x, y) merge(x, y), dfs)
Reduce(function(x, y) {merge(x, y)}, dfs)
Reduce(function(x, y) {merge(x, y, all=TRUE)}, dfs)
class(dfs)
names(dfs)
names(dfs[[1]])
scores <- Reduce(function(x, y) merge(x, y, all = TRUE),
dfs, accumulate = F)
args(merge)
